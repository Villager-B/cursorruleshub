CursorRulesHubというGitHubリポジトリを作成してください。このリポジトリは、Cursorエディタの.cursorrulesファイルを共有・発見するためのプラットフォームです。

以下の要件に従って実装を進めてください：

# 基本機能
1. GitHub APIを使用して.cursorrulesファイルを含む上位100件のリポジトリ情報を取得
2. 24時間ごとにデータを自動更新
3. ユーザーフレンドリーなWebインターフェース
4. GitHub Pagesでのホスティング

# 技術スタック
- フロントエンド: HTML, CSS, JavaScript（フレームワーク不要）
- バックエンド: Python（データ収集スクリプト）
- デプロイ: GitHub Pages
- 自動化: GitHub Actions
- 開発環境: venv（Python仮想環境）

# UI/UX要件
1. リポジトリリスト表示
   - リポジトリ名
   - 説明
   - スター数
   - 主要プログラミング言語
   - リポジトリへのリンク

2. フィルタリング機能
   - スター数でのソート
   - プログラミング言語でのフィルタリング

3. ページネーション
   - 効率的なデータ表示のための実装

# デザイン仕様
1. テーマ: ダークテーマ
2. カラーパレット
   - メイン: #4CAF50 (Material Design Green 500)
   - アクセント: #81C784 (Material Design Green 300)
   - 背景: #1E1E1E
   - テキスト: #E0E0E0

3. タイポグラフィ
   - フォント: Noto Sans JP
   - サイズ階層:
     - 大見出し: 2rem
     - 中見出し: 1.5rem
     - 本文: 1rem
     - メタ情報: 0.875rem

4. デザインスタイル
   - ニューモーフィックUIの採用
   - シャドウ効果の詳細な実装
   - モダンでクリーンなレイアウト

# 実装手順
1. リポジトリのセットアップ
   - 基本ディレクトリ構造の作成
   - 必要なファイルの初期化

2. データ収集スクリプトの実装
   - GitHub API連携
   - データ保存機能
   - エラーハンドリング

3. フロントエンド実装
   - レスポンシブデザイン
   - インタラクティブな機能
   - パフォーマンス最適化

4. 自動化設定
   - GitHub Actionsワークフローの設定
   - 定期的なデータ更新の自動化
   - デプロイプロセスの自動化

# 成果物の構成
```
cursorruleshub/
├── src/
│   ├── index.html
│   ├── css/
│   │   ├── style.css
│   │   └── neumorphism.css
│   ├── js/
│   │   └── main.js
│   └── assets/
│       └── favicon/
├── scripts/
│   └── update_data.py
├── data/
│   └── cursorrules_data.json
└── .github/
    └── workflows/
        └── deploy.yml
```

# 注意事項
1. GitHub APIの利用制限に注意
2. セキュリティベストプラクティスの遵守
3. パフォーマンスの最適化
4. クロスブラウザ対応
5. アクセシビリティへの配慮 